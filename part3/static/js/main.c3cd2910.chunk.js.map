{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCe3B,EArBA,WACb,IAAMI,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNR,WAAW,GAEb,OAAOG,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,aAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,aAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCR5BK,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGP,yBAAKC,UAAU,SACVD,ICHPE,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGA+FSC,EA1FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEG1B,MAAK,SAAA2B,GAAY,OAAIT,EAASS,QAChC,IAEH,IAAMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aA+BxBuC,EAAqB,SAAAhC,GACzB,IAAMV,EAAO6B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,KAChCmC,EAAW,eAAQ7C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACU5B,EAAImC,GACXjC,MAAK,SAAAkC,GACJhB,EAASD,EAAMkB,KAAI,SAAA/C,GAAI,OAAIA,EAAKU,KAAOA,EAAKV,EAAO8C,SAEpDE,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJpC,EAAKI,QADD,sCAGf8C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAElC,KAAOA,UAK1C,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcU,QAASe,IACvB,6BACE,4BAAQ9B,QAAS,kBAAM6B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BA3DeO,EAAYO,KAAI,SAAA/C,GAAI,OACrC,kBAAC,EAAD,CACEmD,IAAKnD,EAAKU,GACVV,KAAMA,EACNC,iBAAkB,kBAAMyC,EAAmB1C,EAAKU,WA0DhD,0BAAM0C,SAlDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS2B,EACTpB,MAAM,IAAI6C,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3BjD,GAAImB,EAAM+B,OAAS,GAGrBtB,EACUiB,GACP3C,MAAK,SAAAE,GACJgB,EAASD,EAAMd,OAAOD,IACtBkB,EAAW,SAsCX,2BACE6B,MAAO9B,EACP+B,SAzDiB,SAACT,GACxBrB,EAAWqB,EAAMU,OAAOF,UA0DpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MCpGNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.c3cd2910.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes' \r\nimport Notification from './components/Notification'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div> \r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]) \r\n  const [newNote, setNewNote] = useState('') \r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => setNotes(initialNotes))\r\n  }, [])\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  )\r\n  \r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(data => {\r\n        setNotes(notes.concat(data))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote} \r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'  \nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}